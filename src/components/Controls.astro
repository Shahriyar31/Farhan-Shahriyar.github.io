---
// src/components/Controls.astro
---
<div class="fixed top-1/2 right-4 transform -translate-y-1/2 z-50 flex flex-col items-center space-y-3">
    <a href="#home" class="control active-btn" title="Home">
        <i class="fas fa-home"></i>
    </a>
    <a href="#projects" class="control" title="Projects">
        <i class="fas fa-briefcase"></i>
    </a>
    <a href="#skills" class="control" title="Skills">
        <i class="fas fa-cogs"></i>
    </a>
    <a href="#experience" class="control" title="Experience">
        <i class="fas fa-business-time"></i>
    </a>
    <a href="#education" class="control" title="Education">
        <i class="fas fa-user-graduate"></i>
    </a>
    <a href="#photography" class="control" title="Photography">
        <i class="fas fa-camera-retro"></i>
    </a>
    <a href="#contact" class="control" title="Contact">
        <i class="fas fa-envelope-open"></i>
    </a>
</div>

<div class="fixed top-4 right-4 z-50 theme-btn">
    <i class="fas fa-adjust"></i>
</div>

<style>
    .control, .theme-btn {
        @apply w-12 h-12 rounded-full bg-slate-200 dark:bg-gray-700 flex items-center justify-center cursor-pointer shadow-lg transition-all duration-300 ease-in-out;
    }
    .control i, .theme-btn i {
        @apply text-lg text-gray-700 dark:text-gray-300 pointer-events-none;
    }
    .active-btn {
        @apply bg-blue-500 -translate-y-1;
    }
    .active-btn i {
        @apply text-white;
    }
    .control:not(.active-btn):hover {
        @apply bg-slate-300 dark:bg-gray-600 -translate-y-1;
    }
</style>

<script>
    // This new script handles the theme toggle and persists the choice.
    document.addEventListener('DOMContentLoaded', () => {
        const themeBtn = document.querySelector('.theme-btn');
        const htmlEl = document.documentElement;

        // Function to apply the theme
        const applyTheme = (theme: string) => {
            if (theme === 'light') {
                htmlEl.classList.add('light-mode');
                htmlEl.classList.remove('dark');
            } else {
                htmlEl.classList.remove('light-mode');
                htmlEl.classList.add('dark');
            }
        };

        // Check for saved theme in localStorage
        const savedTheme = localStorage.getItem('theme');
        if (savedTheme) {
            applyTheme(savedTheme);
        }

        // Add click listener to the button if it exists
        if (themeBtn) {
            themeBtn.addEventListener('click', () => {
                let newTheme = 'dark';
                if (htmlEl.classList.contains('dark')) {
                    newTheme = 'light';
                }
                applyTheme(newTheme);
                localStorage.setItem('theme', newTheme);
            });
        }
    });
</script>